{"ast":null,"code":"const {\n  version\n} = require('../package.json');\n\nconst DEFAULT_RANDOM_ID_LEN = 6;\nconst DICT_RANGES = {\n  digits: [48, 58],\n  lowerCase: [97, 123],\n  upperCase: [65, 91]\n};\n\nclass ShortUniqueId {\n  /* eslint-disable consistent-return */\n  log(...args) {\n    const finalArgs = [...args];\n    finalArgs[0] = `[short-unique-id] ${args[0]}`;\n    /* eslint-disable no-console */\n\n    if (this.debug === true) {\n      if (typeof console !== 'undefined' && console !== null) {\n        return console.log(...finalArgs);\n      }\n    }\n    /* eslint-enable no-console */\n\n  }\n  /* eslint-enable consistent-return */\n\n\n  constructor(options = {}) {\n    this.counter = 0;\n    this.debug = false;\n    this.dict = [];\n    this.version = version;\n    const {\n      dictionary: userDict,\n      skipShuffle\n    } = options;\n\n    if (userDict) {\n      this.dict = userDict;\n    } else {\n      let i;\n      /* eslint-disable no-multi-assign */\n\n      this.dictIndex = i = 0;\n      Object.keys(DICT_RANGES).forEach(rangeType => {\n        this.dictRange = DICT_RANGES[rangeType];\n        /* eslint-disable prefer-destructuring */\n\n        this.lowerBound = this.dictRange[0];\n        this.upperBound = this.dictRange[1];\n        /* eslint-enable prefer-destructuring */\n\n        for (this.dictIndex = i = this.lowerBound; this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound; this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1) {\n          this.dict.push(String.fromCharCode(this.dictIndex));\n        }\n      });\n      /* eslint-enable no-multi-assign */\n    }\n\n    if (!skipShuffle) {\n      // Shuffle Dictionary for removing selection bias.\n      this.dict = this.dict.sort(() => Math.random() - 0.5);\n    } // Cache Dictionary Length for future usage.\n\n\n    this.dictLength = this.dict.length; // Resets internal counter.\n\n    this.counter = 0;\n    this.debug = options.debug;\n    this.log(this.dict);\n    this.log(`Generator instantiated with Dictionary Size ${this.dictLength}`);\n  }\n\n  getDict() {\n    return this.dict;\n  }\n  /**\n  * Generates UUID based on internal counter that's incremented after each ID generation.\n  */\n\n\n  sequentialUUID() {\n    let counterDiv;\n    let counterRem;\n    let id;\n    id = '';\n    counterDiv = this.counter;\n    /* eslint-disable no-constant-condition */\n\n    while (true) {\n      counterRem = counterDiv % this.dictLength;\n      counterDiv = parseInt(counterDiv / this.dictLength, 10);\n      id += this.dict[counterRem];\n\n      if (counterDiv === 0) {\n        break;\n      }\n    }\n    /* eslint-enable no-constant-condition */\n\n\n    this.counter += 1;\n    return id;\n  }\n  /**\n    * Generates UUID by creating each part randomly.\n    * @param {Integer} uuidLength Desired UUID length.\n    */\n\n\n  randomUUID(uuidLength = DEFAULT_RANDOM_ID_LEN) {\n    let id;\n    let randomPartIdx;\n    let j;\n    /* eslint-disable no-unused-vars */\n\n    let idIndex;\n    /* eslint-enable no-unused-vars */\n\n    if (uuidLength === null || typeof uuidLength === 'undefined' || uuidLength < 1) {\n      throw new Error('Invalid UUID Length Provided');\n    } // Generate random ID parts from Dictionary.\n\n\n    id = '';\n    /* eslint-disable */\n\n    for (idIndex = j = 0; 0 <= uuidLength ? j < uuidLength : j > uuidLength; idIndex = 0 <= uuidLength ? j += 1 : j -= 1) {\n      randomPartIdx = parseInt(Math.random() * this.dictLength) % this.dictLength;\n      id += this.dict[randomPartIdx];\n    }\n    /* eslint-enable */\n    // Return random generated ID.\n\n\n    return id;\n  }\n\n  getVersion() {\n    return this.version;\n  }\n\n}\n\nexport default ShortUniqueId;","map":{"version":3,"sources":["/home/abdul/myFolder/todo/node_modules/short-unique-id/src/index.js"],"names":["version","require","DEFAULT_RANDOM_ID_LEN","DICT_RANGES","digits","lowerCase","upperCase","ShortUniqueId","log","args","finalArgs","debug","console","constructor","options","counter","dict","dictionary","userDict","skipShuffle","i","dictIndex","Object","keys","forEach","rangeType","dictRange","lowerBound","upperBound","push","String","fromCharCode","sort","Math","random","dictLength","length","getDict","sequentialUUID","counterDiv","counterRem","id","parseInt","randomUUID","uuidLength","randomPartIdx","j","idIndex","Error","getVersion"],"mappings":"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","sourcesContent":["const { version } = require('../package.json');\n\nconst DEFAULT_RANDOM_ID_LEN = 6;\n\nconst DICT_RANGES = {\n  digits: [48, 58],\n  lowerCase: [97, 123],\n  upperCase: [65, 91],\n};\n\nclass ShortUniqueId {\n  /* eslint-disable consistent-return */\n  log(...args) {\n    const finalArgs = [...args];\n    finalArgs[0] = `[short-unique-id] ${args[0]}`;\n    /* eslint-disable no-console */\n    if (this.debug === true) {\n      if (typeof console !== 'undefined' && console !== null) {\n        return console.log(...finalArgs);\n      }\n    }\n    /* eslint-enable no-console */\n  }\n  /* eslint-enable consistent-return */\n\n  constructor(options = {}) {\n    this.counter = 0;\n    this.debug = false;\n    this.dict = [];\n    this.version = version;\n\n    const {\n      dictionary: userDict,\n      skipShuffle,\n    } = options;\n\n    if (userDict) {\n      this.dict = userDict;\n    } else {\n      let i;\n      /* eslint-disable no-multi-assign */\n      this.dictIndex = i = 0;\n      Object.keys(DICT_RANGES).forEach((rangeType) => {\n        this.dictRange = DICT_RANGES[rangeType];\n        /* eslint-disable prefer-destructuring */\n        this.lowerBound = this.dictRange[0];\n        this.upperBound = this.dictRange[1];\n        /* eslint-enable prefer-destructuring */\n        for (\n          this.dictIndex = i = this.lowerBound;\n          this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound;\n          this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1\n        ) {\n          this.dict.push(String.fromCharCode(this.dictIndex));\n        }\n      });\n      /* eslint-enable no-multi-assign */\n    }\n\n    if (!skipShuffle) {\n      // Shuffle Dictionary for removing selection bias.\n      this.dict = this.dict.sort(() => Math.random() - 0.5);\n    }\n\n    // Cache Dictionary Length for future usage.\n    this.dictLength = this.dict.length;// Resets internal counter.\n    this.counter = 0;\n    this.debug = options.debug;\n    this.log(this.dict);\n    this.log((`Generator instantiated with Dictionary Size ${this.dictLength}`));\n  }\n\n  getDict() {\n    return this.dict;\n  }\n\n  /**\n  * Generates UUID based on internal counter that's incremented after each ID generation.\n  */\n  sequentialUUID() {\n    let counterDiv;\n    let counterRem;\n    let id;\n    id = '';\n    counterDiv = this.counter;\n    /* eslint-disable no-constant-condition */\n    while (true) {\n      counterRem = counterDiv % this.dictLength;\n      counterDiv = parseInt(counterDiv / this.dictLength, 10);\n      id += this.dict[counterRem];\n      if (counterDiv === 0) {\n        break;\n      }\n    }\n    /* eslint-enable no-constant-condition */\n    this.counter += 1;\n    return id;\n  }\n\n  /**\n    * Generates UUID by creating each part randomly.\n    * @param {Integer} uuidLength Desired UUID length.\n    */\n  randomUUID(uuidLength = DEFAULT_RANDOM_ID_LEN) {\n    let id;\n    let randomPartIdx;\n    let j;\n\n    /* eslint-disable no-unused-vars */\n    let idIndex;\n    /* eslint-enable no-unused-vars */\n\n    if ((uuidLength === null || typeof uuidLength === 'undefined') || uuidLength < 1) {\n      throw new Error('Invalid UUID Length Provided');\n    }\n\n    // Generate random ID parts from Dictionary.\n    id = '';\n    /* eslint-disable */\n    for (\n      idIndex = j = 0;\n      0 <= uuidLength ? j < uuidLength : j > uuidLength;\n      idIndex = 0 <= uuidLength ? j += 1: j -= 1\n    ) {\n      randomPartIdx = parseInt(Math.random() * this.dictLength) % this.dictLength;\n      id += this.dict[randomPartIdx];\n    }\n    /* eslint-enable */\n\n    // Return random generated ID.\n    return id;\n  }\n\n  getVersion() {\n    return this.version;\n  }\n}\n\nexport default ShortUniqueId;\n"]},"metadata":{},"sourceType":"module"}